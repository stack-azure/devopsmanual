trigger: none
pr: none

pool:
  vmImage: 'ubuntu-latest'

#https://stackoverflow.com/questions/61497425/azure-devops-azurecli-task-with-scriptpath-option-failed-to-authenticate-to-crea

steps:
- task: replacetokens@3
  inputs:
    targetFiles: 'stackoverflow/12-container-instance/create-container-instance.sh'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    tokenPrefix: '#{'
    tokenSuffix: '}#'
    useLegacyPattern: false
    enableTelemetry: true
- task: AzureCLI@2
  displayName: 'Run tests 1'
  enabled: false
  inputs:
    azureSubscription: 'rg-the-code-manual'
    scriptType: 'bash'
    scriptLocation: 'scriptPath'
    scriptPath: 'stackoverflow/12-container-instance/create-container-instance.sh'

- task: AzureCLI@2
  displayName: 'Run tests 2'
  enabled: false
  inputs:
    azureSubscription: 'rg-the-code-manual'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: 'az container create -g TheCodeManual --name myapp2 --image $(Image) --registry-password $(RegistryPassword) --registry-user $(RegistryUser)'

- task: PowerShell@2
  displayName: List all directories
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.

      echo 'Build.SourcesDirectory'
      echo '$(Build.SourcesDirectory)'
      
      $paths = Get-ChildItem -Path '$(Build.SourcesDirectory)' -Recurse -Directory -Force -ErrorAction SilentlyContinue | Select-Object FullName
      echo "##vso[task.setvariable variable=paths;]$paths"
      echo test
      echo $paths

      $arr = Get-ChildItem '$(Build.SourcesDirectory)' | 
       Where-Object {$_.PSIsContainer} | 
       Foreach-Object {$_.Name}

      echo "##vso[task.setvariable variable=arr;]$arr"

- task: PowerShell@2
  displayName: List all directories from variable
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      Write-Host "Trying to read $env:paths"
      echo '$(paths)'

      Write-Host "Trying to read $env:arr"
      echo '$(arr)'

- task: PowerShell@2
  displayName: Run CSharp code
  inputs:
    targetType: 'inline'
    script: |
      $code = @"
      using System;
      namespace HelloWorld
      {
        public class Program
        {
          public static void Main(){
            Console.WriteLine("Hello world!");
          }
        }
      }
      "@

      Add-Type -TypeDefinition $code -Language CSharp	
      iex "[HelloWorld.Program]::Main()"